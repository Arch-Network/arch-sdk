name: Publish to crates.io

on:
  push:
    tags:
      - 'v*' # Trigger on version tags

permissions:
  contents: read

env:
  CARGO_TERM_COLOR: always
  CARGO_REGISTRY_TOKEN: ${{ secrets.CRATES_IO_TOKEN }}

jobs:
  publish:
    name: Build and Publish
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
      - name: Cache Dependencies
        uses: Swatinem/rust-cache@v2

      # Extract version from tag
      - name: Extract version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      # Build and publish Program crate first
      - name: Build Program
        working-directory: ./program
        run: |
          # Verify program version matches tag
          PROGRAM_VERSION=$(cargo metadata --format-version=1 | jq -r '.packages[] | select(.name == "arch_program") | .version')
          if [ "$PROGRAM_VERSION" != "${{ steps.get_version.outputs.VERSION }}" ]; then
            echo "Error: Program version ($PROGRAM_VERSION) does not match tag version (${{ steps.get_version.outputs.VERSION }})"
            exit 1
          fi
          cargo build --verbose

      - name: Publish Program Crate
        working-directory: ./program
        run: |
          CURRENT_VERSION=$(cargo metadata --format-version=1 | jq -r '.packages[] | select(.name == "arch_program") | .version')
          PUBLISHED_VERSION=$(cargo search arch_program --limit 1 | grep -oP '^arch_program = "\K[^"]+' || echo "0.0.0")
          if [ "$CURRENT_VERSION" != "$PUBLISHED_VERSION" ]; then
            cargo publish --allow-dirty
            echo "Published arch_program version $CURRENT_VERSION"
          else
            echo "Program version $CURRENT_VERSION already published, skipping"
          fi

      # Wait for Program crate to be available
      - name: Wait for Program crate to be available
        run: |
          echo "Waiting for arch_program to be available on crates.io..."
          for i in {1..10}; do
            sleep 30
            if cargo search arch_program | grep -q "^arch_program = \"${{ steps.get_version.outputs.VERSION }}\""; then
              echo "arch_program ${{ steps.get_version.outputs.VERSION }} is now available!"
              exit 0
            fi
            echo "Attempt $i: arch_program ${{ steps.get_version.outputs.VERSION }} not yet available, waiting..."
          done
          echo "Error: arch_program not available after 5 minutes"
          exit 1

      # Update SDK dependency and build
      - name: Update SDK dependency
        working-directory: ./sdk
        run: |
          # Verify SDK version matches tag
          SDK_VERSION=$(cargo metadata --format-version=1 | jq -r '.packages[] | select(.name == "arch_sdk") | .version')
          if [ "$SDK_VERSION" != "${{ steps.get_version.outputs.VERSION }}" ]; then
            echo "Error: SDK version ($SDK_VERSION) does not match tag version (${{ steps.get_version.outputs.VERSION }})"
            exit 1
          fi
          
          # Update arch_program dependency to use the newly published version
          cargo update -p arch_program
          cargo build --verbose

      # Finally publish SDK
      - name: Publish SDK Crate
        working-directory: ./sdk
        run: |
          CURRENT_VERSION=$(cargo metadata --format-version=1 | jq -r '.packages[] | select(.name == "arch_sdk") | .version')
          PUBLISHED_VERSION=$(cargo search arch_sdk --limit 1 | grep -oP '^arch_sdk = "\K[^"]+' || echo "0.0.0")
          if [ "$CURRENT_VERSION" != "$PUBLISHED_VERSION" ]; then
            cargo publish --allow-dirty
            echo "Published arch_sdk version $CURRENT_VERSION"
          else
            echo "SDK version $CURRENT_VERSION already published, skipping"
          fi 