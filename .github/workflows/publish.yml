name: Publish to crates.io

on:
  push:
    tags:
      - 'v*' # Trigger on version tags

env:
  CARGO_TERM_COLOR: always
  CARGO_REGISTRY_TOKEN: ${{ secrets.CRATES_IO_TOKEN }}

jobs:
  verify:
    name: Verify Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
      
      - name: Cache Dependencies
        uses: Swatinem/rust-cache@v2
      
      - name: Build SDK
        working-directory: ./sdk
        run: cargo build --verbose
      
      - name: Build Program
        working-directory: ./program
        run: cargo build --verbose

  publish:
    name: Publish to crates.io
    needs: verify
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
      
      - name: Cache Dependencies
        uses: Swatinem/rust-cache@v2

      # Publish SDK crate first since program might depend on it
      - name: Publish SDK Crate
        working-directory: ./sdk
        run: |
          CURRENT_VERSION=$(cargo metadata --format-version=1 | jq -r '.packages[] | select(.name == "arch_sdk") | .version')
          PUBLISHED_VERSION=$(cargo search arch_sdk --limit 1 | grep -oP '^arch_sdk = "\K[^"]+')
          if [ "$CURRENT_VERSION" != "$PUBLISHED_VERSION" ]; then
            cargo publish --allow-dirty
          else
            echo "SDK version $CURRENT_VERSION already published, skipping"
          fi

      # Add a small delay to ensure the SDK is available
      - name: Wait for SDK to be available
        if: success()
        run: sleep 30

      # Publish Program crate
      - name: Publish Program Crate
        working-directory: ./program
        run: |
          CURRENT_VERSION=$(cargo metadata --format-version=1 | jq -r '.packages[] | select(.name == "arch_program") | .version')
          PUBLISHED_VERSION=$(cargo search arch_program --limit 1 | grep -oP '^arch_program = "\K[^"]+')
          if [ "$CURRENT_VERSION" != "$PUBLISHED_VERSION" ]; then
            cargo publish --allow-dirty
          else
            echo "Program version $CURRENT_VERSION already published, skipping"
          fi 