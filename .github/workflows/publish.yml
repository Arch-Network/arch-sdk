name: Publish to crates.io

on:
  push:
    tags:
      - 'v*' # Trigger on version tags

permissions:
  contents: read

env:
  CARGO_TERM_COLOR: always
  CARGO_REGISTRY_TOKEN: ${{ secrets.CRATES_IO_TOKEN }}

jobs:
  publish:
    name: Build and Publish
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
      - name: Cache Dependencies
        uses: Swatinem/rust-cache@v2

      # Extract version from tag
      - name: Extract version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      # Build and publish Program crate first
      - name: Build Program
        working-directory: ./program
        run: |
          # Verify program version matches tag
          PROGRAM_VERSION=$(cargo metadata --format-version=1 | jq -r '.packages[] | select(.name == "arch_program") | .version')
          if [ "$PROGRAM_VERSION" != "${{ steps.get_version.outputs.VERSION }}" ]; then
            echo "Error: Program version ($PROGRAM_VERSION) does not match tag version (${{ steps.get_version.outputs.VERSION }})"
            exit 1
          fi
          cargo build --verbose

      - name: Check Program Crate Status
        id: program_status
        working-directory: ./program
        run: |
          CURRENT_VERSION=$(cargo metadata --format-version=1 | jq -r '.packages[] | select(.name == "arch_program") | .version')
          if cargo info arch_program | grep -q "version: ${{ steps.get_version.outputs.VERSION }}"; then
            echo "needs_publish=false" >> $GITHUB_OUTPUT
            echo "Program version $CURRENT_VERSION already published, skipping"
          else
            echo "needs_publish=true" >> $GITHUB_OUTPUT
            echo "Program version $CURRENT_VERSION needs to be published"
          fi

      - name: Publish Program Crate
        if: steps.program_status.outputs.needs_publish == 'true'
        working-directory: ./program
        run: |
          if ! cargo publish --allow-dirty 2>&1 | tee publish.log; then
            if grep -q "already exists" publish.log; then
              echo "Program crate already exists on crates.io, continuing..."
            else
              echo "Failed to publish program crate"
              exit 1
            fi
          else
            echo "Published arch_program version ${{ steps.get_version.outputs.VERSION }}"
          fi

      # Wait for Program crate to be available if we just published it
      - name: Wait for Program crate to be available
        if: steps.program_status.outputs.needs_publish == 'true'
        run: |
          echo "Waiting for arch_program to be available on crates.io..."
          
          # Create a temporary directory for testing
          TEMP_DIR=$(mktemp -d)
          cd "$TEMP_DIR"
          
          # Initialize a new Cargo project
          cargo init --name test-availability
          
          for i in {1..10}; do
            echo "Attempt $i: Checking if arch_program ${{ steps.get_version.outputs.VERSION }} is available..."
            
            # Try to add the exact version as a dependency
            if cargo add "arch_program@${{ steps.get_version.outputs.VERSION }}" 2>/dev/null; then
              echo "arch_program ${{ steps.get_version.outputs.VERSION }} is now available!"
              exit 0
            fi
            
            echo "Package not yet available, waiting 30 seconds..."
            sleep 30
          done
          
          echo "Error: arch_program not available after 5 minutes"
          exit 1

      # Update SDK dependency and build
      - name: Update SDK dependency
        working-directory: ./sdk
        run: |
          # Verify SDK version matches tag
          SDK_VERSION=$(cargo metadata --format-version=1 | jq -r '.packages[] | select(.name == "arch_sdk") | .version')
          if [ "$SDK_VERSION" != "${{ steps.get_version.outputs.VERSION }}" ]; then
            echo "Error: SDK version ($SDK_VERSION) does not match tag version (${{ steps.get_version.outputs.VERSION }})"
            exit 1
          fi
          # Update arch_program dependency to use the newly published version
          cargo update -p arch_program
          cargo build --verbose

      # Finally publish SDK if needed
      - name: Check SDK Crate Status
        id: sdk_status
        working-directory: ./sdk
        run: |
          CURRENT_VERSION=$(cargo metadata --format-version=1 | jq -r '.packages[] | select(.name == "arch_sdk") | .version')
          if cargo info arch_sdk | grep -q "version: ${{ steps.get_version.outputs.VERSION }}"; then
            echo "needs_publish=false" >> $GITHUB_OUTPUT
            echo "SDK version $CURRENT_VERSION already published, skipping"
          else
            echo "needs_publish=true" >> $GITHUB_OUTPUT
            echo "SDK version $CURRENT_VERSION needs to be published"
          fi

      - name: Publish SDK Crate
        if: steps.sdk_status.outputs.needs_publish == 'true'
        working-directory: ./sdk
        run: |
          if ! cargo publish --allow-dirty 2>&1 | tee publish.log; then
            if grep -q "already exists" publish.log; then
              echo "SDK crate already exists on crates.io, continuing..."
            else
              echo "Failed to publish SDK crate"
              exit 1
            fi
          else
            echo "Published arch_sdk version ${{ steps.get_version.outputs.VERSION }}"
          fi 